class Chronometer {
  constructor() {
    this.currentTime = 0;
    this.intervalId = null;
  }

  start(callback) {
      this.intervalId = setInterval(() => {
        
        if (callback) {
          callback();
        }
        this.currentTime++;
        
      }, 1000)

  }

  getMinutes() {
    if (this.currentTime >= 60) {
      let currentMinute = parseInt(this.currentTime / 60);

      return currentMinute;
    }
    return 0;
  }

  getSeconds() {
    let currentSeconds = this.currentTime;

    currentSeconds =  parseInt(currentSeconds % 60);

    return currentSeconds;
  }

  computeTwoDigitNumber(value) {
    let twoDigitNumber = value.toString();

    if (value < 10) {
      twoDigitNumber = twoDigitNumber.padStart(2, 0);
    }

    return twoDigitNumber;
  }

  stop() {
    clearInterval(this.intervalId);
  }

  reset() {
    this.currentTime = 0;
  }

  split() {
    let splitTime = "00.00"

    splitTime = (this.computeTwoDigitNumber(this.getMinutes()) + ":" + this.computeTwoDigitNumber(this.getSeconds()));

    return splitTime;
  }
}

// The following is required to make unit tests work.
/* Environment setup. Do not modify the below code. */
if (typeof module !== 'undefined') {
  module.exports = Chronometer;
}


/*

Estos son nuestros hitos:

Nuestro cron칩metro tendr치 una pantalla LCD, donde veremos avanzar los minutos y los segundos.
Tambi칠n tendr치 dos botones diferentes que cambiar치n su comportamiento dependiendo del estado del cron칩metro. 
Por ejemplo, el bot칩n de inicio se convertir치 en un bot칩n de parada cuando el cron칩metro est칠 en marcha.
Como extra, vamos a a침adir una funcionalidad de divisi칩n. 
Si os est치is cuestionando la utilidad de esta funcionalidad, pues puede ser 칰til para recordar cu치nto tiempo hemos empleado en cada iteraci칩n del ejercicio 游땔 
A medida que vayamos terminando una iteraci칩n, podremos pulsar el bot칩n de dividir, as칤 sabremos lo dif칤cil o f치cil que ha sido, dependiendo del tiempo que hayamos tardado en terminarla.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Este laboratorio se divide principalmente en dos partes principales:

Parte 1: la l칩gica (que a침adir치s al archivo javascript/chronometer.js).
Parte 2: la manipulaci칩n del DOM, para que podamos representar visualmente y mostrar la l칩gica previamente escrita (el c칩digo que a침adir치s en el javascript/index.js).
Tu soluci칩n requerir치 el uso de los m칠todos setInterval y clearInterval disponibles globalmente.

setInterval puede ser llamado con una funci칩n como primer argumento y un n칰mero de milisegundos como segundo argumento. Ejecutar치 dicha funci칩n cada n칰mero de milisegundos que le hayas pasado.

Al ser llamado, setInterval devuelve un n칰mero que puede ser usado para identificar el intervalo que fue inicializado. 
Ese mismo intervalo puede ser detenido posteriormente ejecutando clearInterval y pas치ndole el id del intervalo que queremos interrumpir.


----------------- Interacci칩n 1 --------------
walk3(){
  setInterval(() => {
    this.weight -= .1; //this se refiere al m칠todo que estamos usando (Walk3) y no al windows gracias al arrow fuction
    //Hacer algo "return o consol.log()"
  }, 1000)
}
walk4(){
  setInterval(function() => {
    this.weight -= .1; //this se refiere al m칠todo que estamos usando (Walk3) y no al windows gracias al .bind(this)
    //Hacer algo "return o consol.log()"
  }.bind(this), 1000)
}

*/